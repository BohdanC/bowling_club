from abc import ABC, abstractmethod
import re


def do_input_int(message):
    flag = True
    while flag:
        value = input(message)
        if bool(re.match('^[0-9]{1,}$', value)):
            flag = False
            value = int(value)
        else:
            print('error')
    return value

class StuffException(Exception):
    def __init__(self, msg, name):
        self.name = name

        super().__init__(msg)



class Club(ABC):
    name=""
    def init(self, name):
        self.name=name
    def get_name(self):
        self.getname()
#interface
class Nameclass(ABC):
    def get_name(self):
        pass



#абстрактний клас
class player(ABC):
    def init(self,throw_ball):
        self.throw_ball=False
    def throw_the_ball(self):
        self.throw_ball()



#інтерфейс
class throw(ABC):
    @abstractmethod
    def throw_ball():
        pass



def parameters():
    while True:
        try:
            name = input("vvedit imia")
            if bool(re.match('^[A-Z][a-z]{1,}$', name)):
                break
            else:
                raise StuffException("ne pravil'no vvedeno imia",name)
        except StuffException as e:
            print(f'Name exeption:\n {e}:{e.name}')

    age = do_input_int("vvedit' vozrast")
    work_time = do_input_int("vvedit' rabochie vremia")
    try:
        tel_number = do_input_int("Введіть номер телефона")
        if tel_number < 999999999999:
            pass
        else:
            raise Exception("Кількість цифр у номері телефона більша за можливу. Перевірте введений вами номер")


    except Exception as e:
        print(e)
    return name
    return age
    return work_time
    return tel_number

class Stuff(ABC):

    def __init__(self, name, age, work_time, tel_number):
        super().__init__()

    @abstractmethod
    def get_name(self):
        pass

    @abstractmethod
    def get_age(self):
        pass

    @abstractmethod
    def get_work_time(self):
        pass

    @abstractmethod
    def get_tel_number(self):
        pass

class Creator(ABC):
    def foo(self):
        self.create()

    @abstractmethod
    def create(self) -> Stuff:
         pass

class AdminCreator(Creator):
    def create(self):
        return Admin()

class BarmanCreator(Creator):
    def create(self):
        return Barman()

class WaiterCreator(Creator):
    def create(self):
        return Waiter()



class Waiter(Stuff):
    def __init__(self, name, age, work_time, tel_number):
        self.name = name
        self.age = age
        self.work_time = work_time
        self.tel_number = tel_number

    def get_name(self):
        return self.name

    def get_age(self):
        return self.age

    def get_work_time(self):
        return self.work_time

    def get_tel_number(self):
        return self.tel_number


class Barman(Stuff):


    def __init__(self, name, age, work_time, tel_number):
        self.name = name
        self.age = age
        self.work_time = work_time
        self.tel_number = tel_number

    def get_name(self):
        return self.name

    def get_age(self):
        return self.age

    def get_work_time(self):
        return self.work_time

    def get_tel_number(self):
        return self.tel_number

class Admin(Stuff):

    def __init__(self, name, age, work_time, tel_number):
        self.name = name
        self.age = age
        self.work_time = work_time
        self.tel_number = tel_number
        print("Адміністратор створений")

    def get_name(self):
        print(self.name.title() + "Ім'я адміністратора")

    def get_age(self):
        print(self.age.title() + "Вік адміністратора")

    def get_work_time(self):
        print(self.work_time.title() + "Час роботи адміністратора")


    def get_tel_number(self):
        print(self.tel_number.title() + "Номер адміністратора")


